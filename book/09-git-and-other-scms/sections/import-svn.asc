==== Subversion

(((Subversion)))
(((Importing, from Subversion)))
Če ste prebrali prejšnjo sekcijo o uporabi `git svn` lahko enostavno uporabite ta navodila za `git svn clone` repozitorija; nato prenehajte uporabljati strežnik Subversion, potisnite na novi strežnik Git in ga začnite uporabljati.
Če želite zgodovino, lahko to dosežete kakor hitro lahko potegnete podatke iz strežnika Subversion (kar lahko vzame nekaj časa).

Vendar import ni popoln; in ker bo vzel nekaj časa, lahko tudi naredite, kakor je prav.
Prvi problem so informacije avtorja.
V Subversion-u, vsaka oseba, ki pošilja, ima uporabnika na sistemu, ki je posnet v informacija pošiljanja.
Primeri v prejšnji sekciji prikazani `schacon` na nekaterih mestih, kot je izpis `blame` in `git svn log`.
Če želite preslikati to na boljše podatke Git avtorja, morate preslika iz Subversion uporabnikov na avtorje Git.
Ustvarite datoteko imenovano `users.txt`, ki ima to preslikavo v sledeči obliki:

[source]
----
schacon = Scott Chacon <schacon@geemail.com>
selse = Someo Nelse <selse@geemail.com>
----

Da dobite seznam imen avtorja, ki jih uporablja SVN, lahko poženete to:

[source,console]
----
$ svn log --xml | grep author | sort -u | \
  perl -pe 's/.*>(.*?)<.*/$1 = /'
----

To generira izpis dnevnika v XML formatu, nato obdrži samo vrstice z informacijami avtorja, opusti duplikate, izpusti značke XML.
(Očitno to deluje samo na napravi z nameščenimi `grep`, `sort` in `perl`.)
Nato preusmerite ta izpis v vašo datoteko users.txt, da lahko dodate ekvivalentne podatke Git uporabnika zraven vsakega vnosa.

To datoteko lahko ponudite `git svn`, da pomaga preslikati podatke avtorja bolj točno.
Poveste lahko tudi, da `git svn` ne vključuje meta podatkov, ki jih Subvestion običajno uvaža s podajanjem `--no-metadata` k ukazoma `clone` ali `init`.
To naredi vaš ukaz `import`, da izgleda sledeče:

[source,console]
----
$ git svn clone http://my-project.googlecode.com/svn/ \
      --authors-file=users.txt --no-metadata -s my_project
----

Sedaj morate imeti lepši uvoz Subversion-a v vaš direktorij `my_project`.
Namesto pošiljanj, ki izgledajo takole

[source]
----
commit 37efa680e8473b615de980fa935944215428a35a
Author: schacon <schacon@4c93b258-373f-11de-be05-5f7a86268029>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk

    git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de-
    be05-5f7a86268029
----

izgledajo takole:

[source]
----
commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2
Author: Scott Chacon <schacon@geemail.com>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk
----

Ne samo, da polje Author izgleda veliko boljše, ampak tudi `git-svn-id` ni več tam.

Sedaj bi morali narediti tudi nekaj post-import čiščenja.
Za eno stvar, bi morali počistiti čudne reference, ki jih je nastavil `git svn`.
Najprej boste premaknili oznake, da so dejansko oznake namesto čudnih oddaljenih vej in nato boste premaknili preostanek vej, da so lokalne.

Da premaknete oznake, da so ustrezne Git oznake, poženite

[source,console]
----
$ cp -Rf .git/refs/remotes/origin/tags/* .git/refs/tags/
$ rm -Rf .git/refs/remotes/origin/tags
----

To vzame reference, ki so oddaljene veje in se začnejo z `remotes/origin/tags/` in jih naredi realne (lightweight) oznake.

Naslednje premaknite preostanek referenc pod `refs/remotes`, da so lokalne veje:

[source,console]
----
$ cp -Rf .git/refs/remotes/* .git/refs/heads/
$ rm -Rf .git/refs/remotes
----

Sedaj so vse stare veje prave Git veje in vse stare oznake so prave Git oznake.
Zadnja stvar za narediti je dodati vaš novi strežnik Git kot daljavo in potisniti nanj.
Tu je primer dodajanja vašega strežnika kot daljavo:

[source,console]
----
$ git remote add origin git@my-git-server:myrepository.git
----

Ker želite vse vaše veje in oznake dodati gor, lahko sedaj poženete to:

[source,console]
----
$ git push origin --all
----

Vse vaše veje in oznake bi morale biti na vašem novem Git strežniku z lepim, čistim uvozom.

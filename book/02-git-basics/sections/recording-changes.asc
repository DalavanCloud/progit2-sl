=== Snemanje sprememb repozitorija

Imate izdelan repozitorij Git in izpis ali delovno kopijo datotek za ta projekt.
Narediti moreate nekaj sprememb in poslati posnetke teh sprememb v vaš repozitorij vsakič, ko projekt doseže stanje, ki ga želite posneti.

Pomnite, da je lahko vsaka datoteka v vašem delovnem direktoriju v dveh stanjih: sledena ali nesledena.
Sledene datoteke so datoteke, ki so bile v zadnjem posnetku; so lahko nespremenjene, spremenjene ali dane v vmesno fazo.
Nesledene datoteke so vse ostale - katerakoli datoteka v vašem delovnem direktoriju, ki ni bila v vašem zadnjem posnetku in ni v vašem področju vmesne faze.
Ko prvič klonirate repozitorij, bodo vse vaše datoteke sledene in nespremenjene, ker ste jih ravnokar izpisali in jih niste kakorkoli urejali.

Kot boste urejali datoteke, jih Git vidi kot spremenjene, ker ste jih spremenili od zadnjega pošiljanja.
Te spremenjene datoteke date v vmesno fazo in nato pošljete vse vaše spremembe v vmesni fazi in cikel se ponovi.

.The lifecycle of the status of your files.
image::images/lifecycle.png[The lifecycle of the status of your files.]

[[_checking_status]]
==== Preverjanje status vaših datotek

Glavno orodje, ki ga uporabljate, da določite katere datoteke so v kakšnem stanju je ukaz `git status`.(((git commands, status)))
Če ta ukaz poženete direktno po kloniranju, bi morali videti nekaj takega:

[source,console]
----
$ git status
On branch master
nothing to commit, working directory clean
----

To pomeni, da imate čisti delovni direktorij - z drugimi besedami, ni sledenih ali spremenjenih datotek.
Git tudi ne vidi kakršnihkoli nesledenih datotek, drugače bi bile tu izpisane.
Končno ukaz vam pove na kateri veji ste in vas obvesti, da ne izhaja iz iste veje na strežniku.
Za sedaj je ta veja vedno ``master'', kar je privzeto; o tem ne boste tu skrbeli.
<<_git_branching>> bo šlo čez veje in reference v podrobnosti.

Recimo, da dodate novo datoteko v vaš projekt, enostavna datoteka README.
Če datoteka prej še ni obstajala, in poženete `git status`, boste videli vašo nesledeno datoteko kot:

[source,console]
----
$ echo 'My Project' > README
$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)

    README

nothing added to commit but untracked files present (use "git add" to track)
----

Vidite lahko, da vaša nova datoteka README ni sledena, ker je pod ``Untracked files'', ki kaže v vaš izpis statusa.
Nesledeno v osnovi pomeni, da Git vidi datoteko, ki je niste imeli v prejšnjem posnetku (commit); Git je ne bo začel vključevati v vaše poslane posnetke dokler mu tega eksplicitno ne poveste.

To dela zato, da po ne sreči ne začnete vključevati generiranih binarnih datotek ali ostalih datotek, ki jih niste mislili vključiti.
Hoteli boste začeti vključiti README, tako da začnimo s sledenjem datoteke.

[[_tracking_files]]
==== Tracking New Files

Da začnete slediti novi datoteki, uporabite ukaz `git add`.(((git commands, add)))
Da začnete slediti datoteki README, lahko poženete sledeče:

[source,console]
----
$ git add README
---.
Če ponovno poženete vaš ukaz statusa, lahko vidite, da je vaša datoteka README sedaj sledena in dana v vmesno fazo za pošiljanje:

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

----

Lahko poveste, da je dana v vmesno fazo, ker je pod glavo ``Changes to be committed''.
Če pošljete na tej točki, bo verzija datoteke v času, ko ste pognali `git add` v zgodovini posnetka.
Morda se spomnite, da ko ste prej pognali `git init`, ste nato pognali `git add (files)` - to je bil začetek sledenja datotek v vašem direktoriju.(((git commands, init)))(((git commands, add)))

Ukaz `git add` vzame ime poti za ali datoteko ali direktorij; če je direktorij, ukaz doda vse datoteke v tem direktoriju rekurzivno.
==== Staging Modified Files

Spremenimo datoteko, ki je bila že sledena.
Če spremenite prej sledeno datoteko imenovano ``CONTRIBUTING.md'' in nato poženete vaš `git status` ukaz ponovno, dobite nekaj, kar izgleda takole:

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

Datoteka ``CONTRIBUTING.md'' se pojavi pod sekcijo imenovano ``Changed but not staged for commit'' - kar pomeni, da je sledena datoteka bila spremenjena v delujočem direktoriju, vendar še ni bila dana v vmesno fazo.
Za dodajanje v vmesno fazo, poženete ukaz `git add`. `git add` je ukaz z večimi pomeni - uporabite ga za začetek sledenja novih datotek, da date datoteke v vmesno fazo in naredite druge stvari kot je označevanje konfliktov združevanja za rešene. Lahko je v pomoč razmišljanje o tem bolj v smislu ``dodajte to vsebino naslednjemu pošiljanju'' kot pa ``dodajte to datoteku projektu''.(((git commands, add)))
Poženimo `git add` sedaj za dajanje v vmesno fazo datoteki ``CONTRIBUTING.md'' in nato ponovno poženimo `git status`:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

----

Obe datoteki sta dani v vmesno fazo in bosta šli v vaše naslednje pošiljanje.
Na tej točki predpostavimo, da se spomnite neke majhne spremembe, ki jo želite narediti v `CONTRIBUTING.md` preden jo pošljete.
Ponovno jo odprete in naredite to spremembo in že ste pripravljeni na pošiljanje.
Vendar poženimo `git status` še enkrat:

[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

Kaj za vraga?
Sedaj je `CONTRIBUTING.md` izpisan tako kot vmesna faza _kot tudi_ brez vmesne faze.
Kako je to mogoče?
Izkaže se, da Git da datoteko v vmesno fazo točno tako kot je, ko poženete ukaz `git add`.
Če pošljete sedaj, bo verzija `CONTRIBUTING.md` kakršna je bila, ko ste nazadnje pognali ukaz `git add` in bo šla v pošiljanje, ne pa verzija datoteke kot izgleda v vašem delovnem direktoriju, ko poženete ukaz `git commit`.
Če spremenite datoteko po tem, ko poženete `git add`, morate pognati `git add` ponovno, da date v vmesno fazo zadnjo verzijo datoteke:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
----

==== Kratek status

Medtem ko je izpis `git status` precej celovit, je tudi precej gostobeseden. Git ima tudi kratko zastavico statusa, da lahko vidite vaše spremembe na bolj kompakten način. Če poženete `git status -s` ali `git status --short` dobite veliko bolj poenostavljen izpis iz ukaza.

[source,console]
----
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
----

Nove datoteke, ki niso sledene imajo zraven njih `??`, nove datoteke, ki so bile dodane v vmesno fazo imajo `A`, spremenjene datoteke imajo `M` in tako dalje. Obstajata dva stolpca za izpis - levi stolpec označuje, da je bila datoteka dana v vmesno fazo in desni stolpec označuje, da je spremenjena. Torej na primer v tem izpisu je datoteka `README` spremenjena v delovnem direktoriju, vendar še ni dana v vmesno fazo, medtem kot je datoteka `lib/simplegit.rb` spremenjena in dana v vmesno fazo. `Rakefile` je bila spremenjena, dana v vmesno fazo in nato ponovno spremenjena, torej so spremembe na njej, ki so tako dane v vmesno fazo in ne.

[[_ignoring]]
==== Ignoriranje datotek

Pogostokrat boste imeli razred datotek, ki jih ne želite, da jih Git avtomatično doda ali celo prikazuje kot sledene.
Te so v splošnem avtomatsko generirane datoteke, kot so datoteke dnevnika ali datoteke producirane z vašim sistemom gradnje.
V teh primeriih lahko ustvarite vzorec seznama datotek, ki se ujema z imeni `.gitignore`.(((ignoring files)))
Tu je primer `.gitignore` datoteke:

[source,console]
----
$ cat .gitignore
*.[oa]
*~
----

Prva vrstica pove Git-u, naj ignorira katerekoli datoteke, ki se končajo z ``.o'' ali ``.a'' - objekti in arhivske datoteke, ki so lahko produkt gradnje vaše kode.
Druga vrstica pove Git-u naj ignorira vse datoteke, ki se končajo s tildo (`~`), ki je uporabljena s strani mnogih tekstovni urejevalnikov kot je Emacs, da označuje začasne datoteke.
Lahko tudi vključite dnevnik, tmp ali pid direktorij; avtomatsko generirano dokumentacijo; itd.
Nastavitev `.gitignore` datoteke preden pričnete je v splošnem dobra ideja, da po ne sreči ne pošljete datotek, ki jih v resnici ne želite imeti v vašem Git repozitoriju.

Pravila vzorcev, ki jih lahko vključite v `.gitignore` datoteki so sledeča:

*  Prazne vrstice ali vrstice, ki se začnejo z `#` so ignorirane.
*  Standardni glob vzorci delujejo.
*  Lahko zaključite vzorce s poševnico (`/`), da določite direktorij.
*  Lahko negirate vzorec tako, da ga začnete s klicajem (`!`).

Glob vzorci so verjetno poenostavljeni splošni izrazi, ki jih lupina uporablja.
Zvezdica (`*`) se ujema z nič ali več znaki; `[abc]` se ujema s katerimkoli znakom znotraj oglatih oklepajev (v tem primeru a, b, ali c); vprašaj (`?`) se ujema z enim znakom; in zavitimi oklepaji, ki zapirajo znake ločene s pomišljaji (`[0-9]`) se ujema s katerim koli znakom med njimi (v tem primeru 0 do 9).
Lahko uporabite dve zvezdice, da se ujema direktorije; `a/**/z` se ujema z `a/z`, `a/b/z` `a/b/c/z` itd.

Tu je drug primer datoteke .gitignore:

[source]
----
# no .a files
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the root TODO file, not subdir/TODO
/TODO

# ignore all files in the build/ directory
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .txt files in the doc/ directory
doc/**/*.txt
----

[TIP]
====
GitHub upravlja precej zgoščen seznam dobrih primerov `.gitignore` datotek za ducate projektov in jezikov na https://github.com/github/gitignore[], če želite začetno točko za vaš projekt.
====

[[_git_diff_staged]]
==== Ogled vaših sprememb v vmesni fazi in izven vmesne faze

If the `git status` command is too vague for you – you want to know exactly what you changed, not just which files were changed – you can use the `git diff` command.(((git commands, diff)))
We'll cover `git diff` in more detail later, but you'll probably use it most often to answer these two questions: What have you changed but not yet staged?
And what have you staged that you are about to commit?
Although `git status` answers those questions very generally by listing the file names, `git diff` shows you the exact lines added and removed – the patch, as it were.

Let's say you edit and stage the `README` file again and then edit the `CONTRIBUTING.md` file without staging it.
If you run your `git status` command, you once again see something like this:

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

To see what you've changed but not yet staged, type `git diff` with no other arguments:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if you patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

That command compares what is in your working directory with what is in your staging area.
The result tells you the changes you've made that you haven't yet staged.

If you want to see what you've staged that will go into your next commit, you can use `git diff --staged`.
This command compares your staged changes to your last commit:

[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
----

It's important to note that `git diff` by itself doesn't show all changes made since your last commit – only changes that are still unstaged.
This can be confusing, because if you've staged all of your changes, `git diff` will give you no output.

For another example, if you stage the `CONTRIBUTING.md` file and then edit it, you can use `git diff` to see the changes in the file that are staged and the changes that are unstaged. If our environment looks like this:

[source,console]
----
$ git add CONTRIBUTING.md
$ echo 'test line' >> CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Now you can use `git diff` to see what is still unstaged

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line
----

and `git diff --cached` to see what you've staged so far (--staged and --cached are synonyms):

[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if you patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

[NOTE]
[[_git_difftool]]
.Git Diff in an External Tool
====
We will continue to use the `git diff` command in various ways throughout the rest of the book. There is another way to look at these diffs if you prefer a graphical or external diff viewing program instead. If you run `git difftool` instead of `git diff`, you can view any of these diffs in software like Araxis, emerge, vimdiff and more. Run `git difftool --tool-help` to see what is available on your system.
====

[[_committing_changes]]
==== Committing Your Changes

Now that your staging area is set up the way you want it, you can commit your changes.
Remember that anything that is still unstaged – any files you have created or modified that you haven't run `git add` on since you edited them – won't go into this commit.
They will stay as modified files on your disk.
In this case, let's say that the last time you ran `git status`, you saw that everything was staged, so you're ready to commit your changes.(((git commands, status)))
The simplest way to commit is to type `git commit`:(((git commands, commit)))

[source,console]
----
$ git commit
----

Doing so launches your editor of choice.
(This is set by your shell's `$EDITOR` environment variable – usually vim or emacs, although you can configure it with whatever you want using the `git config --global core.editor` command as you saw in <<_getting_started>>).(((editor, changing default)))(((git commands, config)))

The editor displays the following text (this example is a Vim screen):

[source]
----

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----

You can see that the default commit message contains the latest output of the `git status` command commented out and one empty line on top.
You can remove these comments and type your commit message, or you can leave them there to help you remember what you're committing.
(For an even more explicit reminder of what you've modified, you can pass the `-v` option to `git commit`.
Doing so also puts the diff of your change in the editor so you can see exactly what changes you're committing.)
When you exit the editor, Git creates your commit with that commit message (with the comments and diff stripped out).

Alternatively, you can type your commit message inline with the `commit` command by specifying it after a -m flag, like this:

[source,console]
----
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
----

Now you've created your first commit!
You can see that the commit has given you some output about itself: which branch you committed to (`master`), what SHA-1 checksum the commit has (`463dc4f`), how many files were changed, and statistics about lines added and removed in the commit.

Remember that the commit records the snapshot you set up in your staging area.
Anything you didn't stage is still sitting there modified; you can do another commit to add it to your history.
Every time you perform a commit, you're recording a snapshot of your project that you can revert to or compare to later.

==== Skipping the Staging Area

(((staging area, skipping)))
Although it can be amazingly useful for crafting commits exactly how you want them, the staging area is sometimes a bit more complex than you need in your workflow.
If you want to skip the staging area, Git provides a simple shortcut.
Adding the `-a` option to the `git commit` command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the `git add` part:

[source,console]
----
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
----

Notice how you don't have to run `git add` on the ``CONTRIBUTING.md'' file in this case before you commit.

[[_removing_files]]
==== Removing Files

(((files, removing)))
To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit.
The `git rm` command does that, and also removes the file from your working directory so you don't see it as an untracked file the next time around.

If you simply remove the file from your working directory, it shows up under the ``Changed but not updated'' (that is, _unstaged_) area of your `git status` output:

[source,console]
----
$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use "git add" and/or "git commit -a")
----

Then, if you run `git rm`, it stages the file's removal:

[source,console]
----
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    PROJECTS.md
----

The next time you commit, the file will be gone and no longer tracked.
If you modified the file and added it to the index already, you must force the removal with the `-f` option.
This is a safety feature to prevent accidental removal of data that hasn't yet been recorded in a snapshot and that can't be recovered from Git.

Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area.
In other words, you may want to keep the file on your hard drive but not have Git track it anymore.
This is particularly useful if you forgot to add something to your `.gitignore` file and accidentally staged it, like a large log file or a bunch of `.a` compiled files.
To do this, use the `--cached` option:

[source,console]
----
$ git rm --cached README
----

You can pass files, directories, and file-glob patterns to the `git rm` command.
That means you can do things such as

[source,console]
----
$ git rm log/\*.log
----

Note the backslash (`\`) in front of the `*`.
This is necessary because Git does its own filename expansion in addition to your shell's filename expansion.
This command removes all files that have the `.log` extension in the `log/` directory.
Or, you can do something like this:

[source,console]
----
$ git rm \*~
----

This command removes all files that end with `~`.

[[_git_mv]]
==== Moving Files

(((files, moving)))
Unlike many other VCS systems, Git doesn't explicitly track file movement.
If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file.
However, Git is pretty smart about figuring that out after the fact – we'll deal with detecting file movement a bit later.

Thus it's a bit confusing that Git has a `mv` command.
If you want to rename a file in Git, you can run something like

[source,console]
----
$ git mv file_from file_to
----

and it works fine.
In fact, if you run something like this and look at the status, you'll see that Git considers it a renamed file:

[source,console]
----
$ git mv README.md README
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
----

However, this is equivalent to running something like this:

[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----

Git figures out that it's a rename implicitly, so it doesn't matter if you rename a file that way or with the `mv` command.
The only real difference is that `mv` is one command instead of three – it's a convenience function.
More important, you can use any tool you like to rename a file, and address the add/rm later, before you commit.

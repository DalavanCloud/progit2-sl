=== Grafični vmesniki

(((GUIs)))(((Graphical tools)))
Git materno okolje je v terminualu.
Nove lastnosti se najprej prikažejo tam in samo ukazna vrstica je polna moč Git-a v celoti na razpolago.
Vendar osnovni tekst ni najboljša izbira za vsa opravila; včasih je vizualna predstavitev to, kar potrebujete in nakateri uporabniki so veliko bolj udobni z vmesnikom točke in klika.

Pomembno je omeniti, da razlike med vmesniki so prilagojene z različnimi poteki dela.
Nekateri klienti izpostavijo samo pazljive kustose razstave funkcionalnosti Git, da podpirajo določen način dela, ki ga avtor smatra za efektivnega.
Ko se pogleda to v tej luči, nobeno izmed teh orodij ne more biti poimenovano kot ``boljše'' od ostalih, saj so enostavno samo prilagojeni njihovim predvidenim namenom.
Pomnite tudi, da ni ničesar v teh grafičnih klientih, kar klient ukazne vrstice ne more narediti; ukazna vrstica je še vedno, kjer boste imeli največ moči in kontrole, ko delate z vašimi repozitoriji.

==== `gitk` in `git-gui`

(((git commands, gitk)))(((git commands, gui)))(((gitk)))
Ko namestite Git, dobite tudi njegovi vizualni orodji `gitk` in `git-gui`.

`gitk` je grafični pregledovalnih zgodovine.
O njem razmišljajte kot o močni GUI lupini preko `git log` in `git grep`.
To je orodje za uporabo, ko poskušate ugotoviti, kaj se je zgodilo v preteklosti ali vizualizirati zgodovino vašega projekta.

Gitk je najenostavnejši za sklicevanje iz ukazne vrstice.
Naredite samo `cd` v repozitorij Git in vpišite:

[source,console]
----
$ gitk [git log options]
----

Gitk sprejema mnoge opcije ukazne vrstice, večina od njih je podanih preko podležeče akcije `git log`.
Verjetno ena najbolj uporabnik je zastavica `--all`, ki pove gitk, da prikaže pošiljanja, ki so doseglijva iz _kateregakoli_ ref-a ne samo HEAD.
Gitk-jev vmesnik izgleda takole:

.The `gitk` history viewer.
image::images/gitk.png[The `gitk` history viewer.]

Na vrhu je nekaj, kar izgleda kot nek izpis `git log --graph`; vsaka pika predstavlja pošiljanje, vrstice predstavljajo starševska razmerja in ref-i so prikazani kot obarvane škatlice.
Rumena pika predstavlja HEAD in rdeča pika predstavlja spremembe, ki še bodo postale pošiljanja.
Na dnu je pogled izbranega pošiljanja; komentarji in popravki na levi in pogled povzetka na desni.
Vmes je zbirka kontrol uporabljenih za iskanje zgodovine.

`git-gui` na drugi strani je primarno orodje za obdelovanje pošiljanj.
To je tudi najenostavnejše za sklic iz ukazne vrstice:

[source,console]
-----
$ git gui
-----

In izgleda nekako takole:

.The `git-gui` commit tool.
image::images/git-gui.png[The `git-gui` commit tool.]

Na levi je kazalo; spremembe, ki niso v vmesni fazi na vrhu; spremembe dane v vmesno fazo na dnu.
Premikate lahko celotne datoteke med dvemi stanji s klikom na njihove ikone ali pa lahko izberete datoteko za pogled s klikom na njeno ime.

Desno zgoraj je pogled diff, ki prikazuje spremembe za trenutno izbrano datoteko.
Posamezne kupe lahko date v vmesno fazo (ali posamezne vrstice) z desnim klikom v tem področju.

Desno spodaj je sporočilo in področje akcije. Vpišite vaše sporočilo v tekstovno polje in kliknite ``Commit'', da naredite nekaj podobnega `git commit`.
Lahko tudi izberete za spreminjanje zadnjega pošiljanja z izbiro ``Amend'' izbirnega gumba, ki bo posodobil področje ``Staged Changes'' z vsebino zadnjega pošiljanja.
Nato lahko enostavno date v vmesno fazo ali date izved vmesne faze nekatere spremembe, spremenite sporočilo pošiljanja in kliknite ``Commit'' ponovno, da zamenjate starejše pošiljanje z novim.

`gitk` in `git-gui` so primeri orodij orientiranih na naloge.
Vsako od njih je prilagojeno za določen namen (ogledovanje zgodovine in ustvarjanje pošiljanj zaporedno) in izpuščanju lastnosti, ki niso potrebne za to opravilo.


==== GitHub za Mac in Windows

(((GitHub for Mac)))(((GitHub for Windows)))
GitHub je ustvaril dva poteku dela orientirana klienta Git: enega za Windows in enega za Mac.
Ta klienta sta dober primer poteku dela orientiranih orodij - namesto izpostavljnju _vseh_ funkcionalnosti Git-a, se namesto tega fokusirata na kuriran skupek pogosto uporabljenih lastnosti, ki skupaj dobro delajo.
Izgledata nekako takole:

.GitHub for Mac.
image::images/github_mac.png[GitHub for Mac.]

.GitHub for Windows.
image::images/github_win.png[GitHub for Windows.]

Oblikovana sta, da izgledata in delujeta zelo podobno, torej ju bomo tretirali kot en produkt v tem poglavju.
Ne bomo delali podrobnostnega poteka teh orodij (imata svojo lastno dokumentacijo), vendar na hitro iti skozi pogled sprememb (kjer boste porabili večino vašega časa) je v redu.

* On the left is the list of repositories the client is tracking; you can add a repository (either by cloning or attaching locally) by clicking the ``+'' icon at the top of this area.
* In the center is a commit-input area, which lets you input a commit message, and select which files should be included.
  (On Windows, the commit history is displayed directly below this; on Mac, it's on a separate tab.)
* On the right is a diff view, which shows what's changed in your working directory, or which changes were included in the selected commit.
* The last thing to notice is the ``Sync'' button at the top-right, which is the primary way you interact over the network.

[NOTE]
====
You don't need a GitHub account to use these tools.
While they're designed to highlight GitHub's service and recommended workflow, they will happily work with any repository, and do network operations with any Git host.
====

===== Installation

GitHub for Windows can be downloaded from https://windows.github.com[], and GitHub for Mac from https://mac.github.com[].
When the applications are first run, they walk you through all the first-time Git setup, such as configuring your name and email address, and both set up sane defaults for many common configuration options, such as credential caches and CRLF behavior.

Both are ``evergreen'' – updates are downloaded and installed in the background while the applications are open.
This helpfully includes a bundled version of Git, which means you probably won't have to worry about manually updating it again.
On Windows, the client includes a shortcut to launch Powershell with Posh-git, which we'll talk more about later in this chapter.

The next step is to give the tool some repositories to work with.
The client shows you a list of the repositories you have access to on GitHub, and can clone them in one step.
If you already have a local repository, just drag its directory from the Finder or Windows Explorer into the GitHub client window, and it will be included in the list of repositories on the left.

===== Recommended Workflow

Once it's installed and configured, you can use the GitHub client for many common Git tasks.
The intended workflow for this tool is sometimes called the ``GitHub Flow.''
We cover this in more detail in <<_github_flow>>, but the general gist is that (a) you'll be committing to a branch, and (b) you'll be syncing up with a remote repository fairly regularly.

Branch management is one of the areas where the two tools diverge.
On Mac, there's a button at the top of the window for creating a new branch:

.``Create Branch'' button on Mac.
image::images/branch_widget_mac.png[``Create Branch'' button on Mac.]

On Windows, this is done by typing the new branch's name in the branch-switching widget:

.Creating a branch on Windows.
image::images/branch_widget_win.png[Creating a branch on Windows.]

Once your branch is created, making new commits is fairly straightforward.
Make some changes in your working directory, and when you switch to the GitHub client window, it will show you which files changed.
Enter a commit message, select the files you'd like to include, and click the ``Commit'' button (ctrl-enter or ⌘-enter).

The main way you interact with other repositories over the network is through the ``Sync'' feature.
Git internally has separate operations for pushing, fetching, merging, and rebasing, but the GitHub clients collapse all of these into one multi-step feature.
Here's what happens when you click the Sync button:

. `git pull --rebase`.
  If this fails because of a merge conflict, fall back to `git pull --no-rebase`.
. `git push`.

This is the most common sequence of network commands when working in this style, so squashing them into one command saves a lot of time.

===== Summary

These tools are very well-suited for the workflow they're designed for.
Developers and non-developers alike can be collaborating on a project within minutes, and many of the best practices for this kind of workflow are baked into the tools.
However, if your workflow is different, or you want more control over how and when network operations are done, we recommend you use another client or the command line.


==== Other GUIs

There are a number of other graphical Git clients, and they run the gamut from specialized, single-purpose tools all the way to apps that try to expose everything Git can do.
The official Git website has a curated list of the most popular clients at http://git-scm.com/downloads/guis[].
A more comprehensive list is available on the Git wiki site, at https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces[].
